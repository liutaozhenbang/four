设计模式
1.策略模式：就是将对象中的变化的部分抽取出来 形成单独的类或者接口
			然后作为类的属性 从而实现解耦

2.观察者模式：就是发布订阅模式  由主题发布信息 然后遍历的通知其他的观察者

3.装饰者模式：将对象作为参数传给下一个对象 不同的组合实现解耦 如调味品修饰饮料

4.工厂方法模式：通过让子类去决定创建的对象是什么 达到将对象的创建过程封装的目的减少代码中的对具体类的依赖来解耦合

5.抽象工厂模式：提供一个接口 让对象依赖接口而不是依赖具体的类   即依赖倒置

6.单例模式：提供一个私有的构造方法，然后提供公开的getInstance的方法使全局只有一个类的实例

7.命令模式：将不同的方法分装起来，封装成接口的execute方法，屏蔽调用者，就像万能遥控器去遥控不同的电器，
			遥控器不需要知道电器执行什么动作

8.适配器模式：将一个类的接口，转换成用户需要的另一个接口，可以让不兼容的类兼容

9.外观模式：提供了一个统一的接口，用来访问子系统中的一群接口。外观定义的一个高级接口
			让子系统更容易使用。

10.模板模式：就是提供一个抽象的接口，使用不同的子类来实现相同的方

11.迭代器模式：就是将一个集合或者数组一个一个的返回 屏蔽集合或者数组的差异
			提供一种方法  顺序的访问一个聚合对象中的各个元素，而又不会暴露内部的表示

12.组合模式：将整体和部分实现相同的接口，使用相同的方法去调用他们，从而屏蔽他们的差异。
